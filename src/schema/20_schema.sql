\connect mycodeplug
CREATE TABLE IF NOT EXISTS users (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created timestamp with time zone NOT NULL DEFAULT now(),
    created_ip inet NOT NULL,
    email text UNIQUE NOT NULL,
    enabled boolean NOT NULL DEFAULT true,
    admin boolean NOT NULL DEFAULT false,
    name text,
    data jsonb
);

CREATE INDEX users_created_ip ON users(created_ip);
CREATE INDEX users_email ON users(email);
CREATE INDEX users_name ON users(name);

CREATE TABLE IF NOT EXISTS groups (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created timestamp with time zone NOT NULL DEFAULT now(),
    created_ip inet NOT NULL,
    owner int references users(id) NOT NULL,
    members int[]
);

CREATE TABLE IF NOT EXISTS otp (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id int references users(id) NOT NULL,
    ts timestamp with time zone NOT NULL DEFAULT now(),
    ip inet NOT NULL,
    expires timestamp with time zone NOT NULL DEFAULT (now() + '5 minutes'::interval),
    otp text NOT NULL
);
-- XXX: should readonly user have access to otp? 
CREATE INDEX otp_user_id_ip_otp ON otp(user_id, ip);

CREATE TABLE IF NOT EXISTS channel (
    channel_uuid uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    owner int references users(id) NOT NULL,
    group_id int references groups(id) NOT NULL,
    source text NOT NULL,
    source_id text,
    parent_channel uuid references channel(channel_uuid)
);

CREATE INDEX channel_owner ON channel(owner);
CREATE INDEX channel_uuid ON channel(channel_uuid);

CREATE TABLE IF NOT EXISTS channel_name (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text,
    alt_name_16 varchar(16),
    alt_name_6 varchar(6),
    alt_name_5 varchar(5)
);

CREATE TYPE power AS ENUM ('low', 'mid', 'high', 'turbo');

CREATE TABLE IF NOT EXISTS channel_revision (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id int references users(id) NOT NULL,
    channel_uuid uuid references channel(channel_uuid) NOT NULL,
    ts timestamp with time zone NOT NULL DEFAULT now(),
    name_id int references channel_name(id),
    description jsonb,
    frequency numeric(8, 4),
    f_offset numeric(8, 4),
    power power,
    rx_only boolean,
    mode text,
    mode_settings jsonb,
    vendor_settings jsonb
);

/* channel revision aggregation query
SELECT
    channel.channel_uuid,
    owner,
    group_id,
    source,
    source_id,
    (ARRAY_AGG(name) FILTER (WHERE name IS NOT NULL))[1] as name,
    (ARRAY_AGG(alt_name_16) FILTER (WHERE alt_name_16 IS NOT NULL))[1] as alt_name_16,
    (ARRAY_AGG(alt_name_6) FILTER (WHERE alt_name_6 IS NOT NULL))[1] as alt_name_6,
    (ARRAY_AGG(alt_name_5) FILTER (WHERE alt_name_5 IS NOT NULL))[1] as alt_name_5,
    (ARRAY_AGG(description) FILTER (WHERE description IS NOT NULL))[1] as description,
    (ARRAY_AGG(frequency) FILTER (WHERE frequency IS NOT NULL))[1] as frequency,
    (ARRAY_AGG(f_offset) FILTER (WHERE f_offset IS NOT NULL))[1] as f_offset,
    (ARRAY_AGG(power) FILTER (WHERE power IS NOT NULL))[1] as power,
    (ARRAY_AGG(rx_only) FILTER (WHERE rx_only IS NOT NULL))[1] as rx_only,
    (ARRAY_AGG(mode) FILTER (WHERE mode IS NOT NULL))[1] as mode,
    (ARRAY_AGG(mode_settings) FILTER (WHERE mode_settings IS NOT NULL))[1] as mode_settings,
    (ARRAY_AGG(vendor_settings) FILTER (WHERE vendor_settings IS NOT NULL))[1] as vendor_settings,
    MAX(ts) as last_updated,
    COUNT(ts) as n_revisions
FROM channel
JOIN 
        (SELECT channel_uuid, ts, name, alt_name_16, alt_name_6, alt_name_5, description,
                frequency, f_offset, power, rx_only, mode, mode_settings,
                vendor_settings
         FROM channel_revision
         LEFT JOIN channel_name ON channel_revision.name_id = channel_name.id
         ORDER BY ts DESC) as revisions ON channel.channel_uuid = revisions.channel_uuid
GROUP BY channel.channel_uuid
*/
